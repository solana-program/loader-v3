/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/web3.js';
import { LOADER_V3_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SET_AUTHORITY_CHECKED_DISCRIMINATOR = 7;

export function getSetAuthorityCheckedDiscriminatorBytes() {
  return getU32Encoder().encode(SET_AUTHORITY_CHECKED_DISCRIMINATOR);
}

export type SetAuthorityCheckedInstruction<
  TProgram extends string = typeof LOADER_V3_PROGRAM_ADDRESS,
  TAccountBufferOrProgramDataAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountCurrentAuthority extends string | IAccountMeta<string> = string,
  TAccountNewAuthority extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountBufferOrProgramDataAccount extends string
        ? WritableAccount<TAccountBufferOrProgramDataAccount>
        : TAccountBufferOrProgramDataAccount,
      TAccountCurrentAuthority extends string
        ? ReadonlySignerAccount<TAccountCurrentAuthority> &
            IAccountSignerMeta<TAccountCurrentAuthority>
        : TAccountCurrentAuthority,
      TAccountNewAuthority extends string
        ? ReadonlySignerAccount<TAccountNewAuthority> &
            IAccountSignerMeta<TAccountNewAuthority>
        : TAccountNewAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type SetAuthorityCheckedInstructionData = { discriminator: number };

export type SetAuthorityCheckedInstructionDataArgs = {};

export function getSetAuthorityCheckedInstructionDataEncoder(): Encoder<SetAuthorityCheckedInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU32Encoder()]]),
    (value) => ({
      ...value,
      discriminator: SET_AUTHORITY_CHECKED_DISCRIMINATOR,
    })
  );
}

export function getSetAuthorityCheckedInstructionDataDecoder(): Decoder<SetAuthorityCheckedInstructionData> {
  return getStructDecoder([['discriminator', getU32Decoder()]]);
}

export function getSetAuthorityCheckedInstructionDataCodec(): Codec<
  SetAuthorityCheckedInstructionDataArgs,
  SetAuthorityCheckedInstructionData
> {
  return combineCodec(
    getSetAuthorityCheckedInstructionDataEncoder(),
    getSetAuthorityCheckedInstructionDataDecoder()
  );
}

export type SetAuthorityCheckedInput<
  TAccountBufferOrProgramDataAccount extends string = string,
  TAccountCurrentAuthority extends string = string,
  TAccountNewAuthority extends string = string,
> = {
  /** Buffer or ProgramData account to change the authority of. */
  bufferOrProgramDataAccount: Address<TAccountBufferOrProgramDataAccount>;
  /** Current authority. */
  currentAuthority: TransactionSigner<TAccountCurrentAuthority>;
  /** New authority. */
  newAuthority: TransactionSigner<TAccountNewAuthority>;
};

export function getSetAuthorityCheckedInstruction<
  TAccountBufferOrProgramDataAccount extends string,
  TAccountCurrentAuthority extends string,
  TAccountNewAuthority extends string,
>(
  input: SetAuthorityCheckedInput<
    TAccountBufferOrProgramDataAccount,
    TAccountCurrentAuthority,
    TAccountNewAuthority
  >
): SetAuthorityCheckedInstruction<
  typeof LOADER_V3_PROGRAM_ADDRESS,
  TAccountBufferOrProgramDataAccount,
  TAccountCurrentAuthority,
  TAccountNewAuthority
> {
  // Program address.
  const programAddress = LOADER_V3_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    bufferOrProgramDataAccount: {
      value: input.bufferOrProgramDataAccount ?? null,
      isWritable: true,
    },
    currentAuthority: {
      value: input.currentAuthority ?? null,
      isWritable: false,
    },
    newAuthority: { value: input.newAuthority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.bufferOrProgramDataAccount),
      getAccountMeta(accounts.currentAuthority),
      getAccountMeta(accounts.newAuthority),
    ],
    programAddress,
    data: getSetAuthorityCheckedInstructionDataEncoder().encode({}),
  } as SetAuthorityCheckedInstruction<
    typeof LOADER_V3_PROGRAM_ADDRESS,
    TAccountBufferOrProgramDataAccount,
    TAccountCurrentAuthority,
    TAccountNewAuthority
  >;

  return instruction;
}

export type ParsedSetAuthorityCheckedInstruction<
  TProgram extends string = typeof LOADER_V3_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Buffer or ProgramData account to change the authority of. */
    bufferOrProgramDataAccount: TAccountMetas[0];
    /** Current authority. */
    currentAuthority: TAccountMetas[1];
    /** New authority. */
    newAuthority: TAccountMetas[2];
  };
  data: SetAuthorityCheckedInstructionData;
};

export function parseSetAuthorityCheckedInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSetAuthorityCheckedInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      bufferOrProgramDataAccount: getNextAccount(),
      currentAuthority: getNextAccount(),
      newAuthority: getNextAccount(),
    },
    data: getSetAuthorityCheckedInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}

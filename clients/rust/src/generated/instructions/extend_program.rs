//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
pub struct ExtendProgram {
    /// ProgramData account.
    pub program_data_account: solana_program::pubkey::Pubkey,
    /// Program account.
    pub program_account: solana_program::pubkey::Pubkey,
    /// System program (optional).
    pub system_program: Option<solana_program::pubkey::Pubkey>,
    /// Payer.
    pub payer: Option<solana_program::pubkey::Pubkey>,
}

impl ExtendProgram {
    pub fn instruction(
        &self,
        args: ExtendProgramInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: ExtendProgramInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(4 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.program_data_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.program_account,
            false,
        ));
        if let Some(system_program) = self.system_program {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                system_program,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::LOADER_V3_ID,
                false,
            ));
        }
        if let Some(payer) = self.payer {
            accounts.push(solana_program::instruction::AccountMeta::new(payer, true));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::LOADER_V3_ID,
                false,
            ));
        }
        accounts.extend_from_slice(remaining_accounts);
        let mut data = ExtendProgramInstructionData::new().try_to_vec().unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::LOADER_V3_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct ExtendProgramInstructionData {
    discriminator: u32,
}

impl ExtendProgramInstructionData {
    pub fn new() -> Self {
        Self { discriminator: 6 }
    }
}

impl Default for ExtendProgramInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ExtendProgramInstructionArgs {
    pub additional_bytes: u32,
}

/// Instruction builder for `ExtendProgram`.
///
/// ### Accounts:
///
///   0. `[writable]` program_data_account
///   1. `[writable]` program_account
///   2. `[optional]` system_program
///   3. `[writable, signer, optional]` payer
#[derive(Clone, Debug, Default)]
pub struct ExtendProgramBuilder {
    program_data_account: Option<solana_program::pubkey::Pubkey>,
    program_account: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    payer: Option<solana_program::pubkey::Pubkey>,
    additional_bytes: Option<u32>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl ExtendProgramBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// ProgramData account.
    #[inline(always)]
    pub fn program_data_account(
        &mut self,
        program_data_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.program_data_account = Some(program_data_account);
        self
    }
    /// Program account.
    #[inline(always)]
    pub fn program_account(
        &mut self,
        program_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.program_account = Some(program_account);
        self
    }
    /// `[optional account]`
    /// System program (optional).
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.system_program = system_program;
        self
    }
    /// `[optional account]`
    /// Payer.
    #[inline(always)]
    pub fn payer(&mut self, payer: Option<solana_program::pubkey::Pubkey>) -> &mut Self {
        self.payer = payer;
        self
    }
    #[inline(always)]
    pub fn additional_bytes(&mut self, additional_bytes: u32) -> &mut Self {
        self.additional_bytes = Some(additional_bytes);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = ExtendProgram {
            program_data_account: self
                .program_data_account
                .expect("program_data_account is not set"),
            program_account: self.program_account.expect("program_account is not set"),
            system_program: self.system_program,
            payer: self.payer,
        };
        let args = ExtendProgramInstructionArgs {
            additional_bytes: self
                .additional_bytes
                .clone()
                .expect("additional_bytes is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `extend_program` CPI accounts.
pub struct ExtendProgramCpiAccounts<'a, 'b> {
    /// ProgramData account.
    pub program_data_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// Program account.
    pub program_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// System program (optional).
    pub system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Payer.
    pub payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
}

/// `extend_program` CPI instruction.
pub struct ExtendProgramCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// ProgramData account.
    pub program_data_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// Program account.
    pub program_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// System program (optional).
    pub system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Payer.
    pub payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// The arguments for the instruction.
    pub __args: ExtendProgramInstructionArgs,
}

impl<'a, 'b> ExtendProgramCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: ExtendProgramCpiAccounts<'a, 'b>,
        args: ExtendProgramInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            program_data_account: accounts.program_data_account,
            program_account: accounts.program_account,
            system_program: accounts.system_program,
            payer: accounts.payer,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(4 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.program_data_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.program_account.key,
            false,
        ));
        if let Some(system_program) = self.system_program {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *system_program.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::LOADER_V3_ID,
                false,
            ));
        }
        if let Some(payer) = self.payer {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *payer.key, true,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::LOADER_V3_ID,
                false,
            ));
        }
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = ExtendProgramInstructionData::new().try_to_vec().unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::LOADER_V3_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(4 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.program_data_account.clone());
        account_infos.push(self.program_account.clone());
        if let Some(system_program) = self.system_program {
            account_infos.push(system_program.clone());
        }
        if let Some(payer) = self.payer {
            account_infos.push(payer.clone());
        }
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `ExtendProgram` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` program_data_account
///   1. `[writable]` program_account
///   2. `[optional]` system_program
///   3. `[writable, signer, optional]` payer
#[derive(Clone, Debug)]
pub struct ExtendProgramCpiBuilder<'a, 'b> {
    instruction: Box<ExtendProgramCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> ExtendProgramCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(ExtendProgramCpiBuilderInstruction {
            __program: program,
            program_data_account: None,
            program_account: None,
            system_program: None,
            payer: None,
            additional_bytes: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// ProgramData account.
    #[inline(always)]
    pub fn program_data_account(
        &mut self,
        program_data_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.program_data_account = Some(program_data_account);
        self
    }
    /// Program account.
    #[inline(always)]
    pub fn program_account(
        &mut self,
        program_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.program_account = Some(program_account);
        self
    }
    /// `[optional account]`
    /// System program (optional).
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.system_program = system_program;
        self
    }
    /// `[optional account]`
    /// Payer.
    #[inline(always)]
    pub fn payer(
        &mut self,
        payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.payer = payer;
        self
    }
    #[inline(always)]
    pub fn additional_bytes(&mut self, additional_bytes: u32) -> &mut Self {
        self.instruction.additional_bytes = Some(additional_bytes);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool`
    /// indicating whether the account is writable or not, and a `bool`
    /// indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = ExtendProgramInstructionArgs {
            additional_bytes: self
                .instruction
                .additional_bytes
                .clone()
                .expect("additional_bytes is not set"),
        };
        let instruction = ExtendProgramCpi {
            __program: self.instruction.__program,

            program_data_account: self
                .instruction
                .program_data_account
                .expect("program_data_account is not set"),

            program_account: self
                .instruction
                .program_account
                .expect("program_account is not set"),

            system_program: self.instruction.system_program,

            payer: self.instruction.payer,
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct ExtendProgramCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    program_data_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    program_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    additional_bytes: Option<u32>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
